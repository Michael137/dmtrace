# #Flag to enable offload packets feature
# CONFIG_WLAN_OFFLOAD_PACKETS := y
# 
# #Flag to enable Fast Path feature
# CONFIG_WLAN_FASTPATH := y

# As per target team, build is done as follows:
# Defconfig : build with default flags
# Slub      : defconfig  + CONFIG_SLUB_DEBUG=y +
#	      CONFIG_SLUB_DEBUG_ON=y + CONFIG_PAGE_POISONING=y
# Perf      : Using appropriate msmXXXX-perf_defconfig
#
# Shipment builds (user variants) should not have any debug feature
# enabled. This is identified using 'TARGET_BUILD_VARIANT'. Slub builds
# are identified using the CONFIG_SLUB_DEBUG_ON configuration. Since
# there is no other way to identify defconfig builds, QCOMs internal
# representation of perf builds (identified using the string 'perf'),
# is used to identify if the build is a slub or defconfig one. This
# way no critical debug feature will be enabled for perf and shipment
# builds. Other OEMs are also protected using the TARGET_BUILD_VARIANT
# config.

# CONFIG_FEATURE_PKTLOG := y

# ifeq ($(CONFIG_DEBUG_FS), y)
# endif

# If not set, assume, Common driver is with in the build tree
# WLAN_COMMON_ROOT ?= ../qca-wifi-host-cmn
# WLAN_COMMON_INC ?= $(WLAN_ROOT)/$(WLAN_COMMON_ROOT)

#Whether to build debug version
BUILD_DEBUG_VERSION := 1

#Do we panic on bug?  default is to warn
# ifeq ($(CONFIG_PERF_DEBUG), y)
# 	PANIC_ON_BUG := 1
# endif

#Endianess selection
CONFIG_LITTLE_ENDIAN := 1

# #Enable Checksum Offload
# CONFIG_CHECKSUM_OFFLOAD := 1

# #Enable GTK offload
# CONFIG_GTK_OFFLOAD := 1

#Enable IPA offload
# ifeq ($(CONFIG_IPA), y)
#   CONFIG_IPA_OFFLOAD := 1
#   CONFIG_NUM_IPA_IFACE := 3
# endif
# ifeq ($(CONFIG_IPA3), y)
#   CONFIG_IPA_OFFLOAD := 1
#   CONFIG_NUM_IPA_IFACE := 2
# endif

# #Enable collecting target RAM dump after kernel panic
# CONFIG_TARGET_RAMDUMP_AFTER_KERNEL_PANIC := 1
# 
# #Flag to enable/disable secure firmware feature
# CONFIG_FEATURE_SECURE_FIRMWARE := 0

############ DSP ############
DSP_DIR :=	core/drv_perf_dsp
DSP_INC_DIR :=	$(DSP_DIR)/inc
DSP_SRC_DIR :=	$(DSP_DIR)/src

DSP_INC := 	-I$(DRV_PERF_ROOT)/$(DSP_INC_DIR) \
		-I$(DRV_PERF_ROOT)/$(DSP_SRC_DIR)

DSP_OBJS := $(DSP_SRC_DIR)/drv_perf_dsp_main.o

# ifeq ($(CONFIG_WLAN_DEBUGFS), y)
#   HDD_OBJS += $(HDD_SRC_DIR)/wlan_hdd_debugfs.o
#   HDD_OBJS += $(HDD_SRC_DIR)/wlan_hdd_debugfs_llstat.o
#   HDD_OBJS += $(HDD_SRC_DIR)/wlan_hdd_debugfs_csr.o
#   HDD_OBJS += $(HDD_SRC_DIR)/wlan_hdd_debugfs_connect.o
#   HDD_OBJS += $(HDD_SRC_DIR)/wlan_hdd_debugfs_offload.o
#   HDD_OBJS += $(HDD_SRC_DIR)/wlan_hdd_debugfs_roam.o
# endif

#######################################################

############ WLAN_LOGGING ############
# WLAN_LOGGING_DIR     :=	core/utils/logging
# WLAN_LOGGING_INC_DIR :=	$(WLAN_LOGGING_DIR)/inc
# WLAN_LOGGING_SRC_DIR :=	$(WLAN_LOGGING_DIR)/src
# 
# WLAN_LOGGING_INC     := -I$(WLAN_ROOT)/$(WLAN_LOGGING_INC_DIR)
# WLAN_LOGGING_OBJS    := $(WLAN_LOGGING_SRC_DIR)/wlan_logging_sock_svc.o

#####################
LINUX_INC :=	-Iinclude

INCS := $(DSP_INC)

OBJS := $(DSP_OBJS)

EXTRA_CFLAGS += $(INCS)

CDEFINES := -DANI_LITTLE_BYTE_ENDIAN \
	    -DANI_LITTLE_BIT_ENDIAN \
	    -DDOT11F_LITTLE_ENDIAN_HOST \
	    -DANI_COMPILER_TYPE_GCC \
	    -DANI_OS_TYPE_ANDROID=6 \
	    -DPTT_SOCK_SVC_ENABLE \
	    -Wall\
	    -Werror\
	    -D__linux__ \

ifeq (y,$(findstring y,$(CONFIG_ARCH_MSM) $(CONFIG_ARCH_QCOM)))
CDEFINES += -DMSM_PLATFORM
endif

# ifeq ($(BUILD_DEBUG_VERSION),1)
# CDEFINES += -DWLAN_DEBUG \
# 	     -DTRACE_RECORD \
# 	     -DLIM_TRACE_RECORD \
# 	     -DSME_TRACE_RECORD \
# 	     -DHDD_TRACE_RECORD \
# 	     -DPE_DEBUG_LOGW \
# 	     -DPE_DEBUG_LOGE
# endif

ifeq ($(PANIC_ON_BUG),1)
  CDEFINES += -DPANIC_ON_BUG
endif

#Endianess selection
ifeq ($(CONFIG_LITTLE_ENDIAN), 1)
  AH_LITTLE_ENDIAN=1234
  CDEFINES += -DAH_BYTE_ORDER=$(AH_LITTLE_ENDIAN)
else
  AH_BIG_ENDIAN=4321
  CDEFINES += -DAH_BYTE_ORDER=$(AH_BIG_ENDIAN)
  CDEFINES += -DBIG_ENDIAN_HOST
endif

#Enable collecting target RAM dump after kernel panic
ifeq ($(CONFIG_TARGET_RAMDUMP_AFTER_KERNEL_PANIC), 1)
  CDEFINES += -DTARGET_RAMDUMP_AFTER_KERNEL_PANIC
endif

KBUILD_CPPFLAGS += $(CDEFINES)

# Currently, for versions of gcc which support it, the kernel Makefile
# is disabling the maybe-uninitialized warning.  Re-enable it for the
# WLAN driver.  Note that we must use EXTRA_CFLAGS here so that it
# will override the kernel settings.
ifeq ($(call cc-option-yn, -Wmaybe-uninitialized),y)
  EXTRA_CFLAGS += -Wmaybe-uninitialized
endif

EXTRA_CFLAGS += -Wmissing-prototypes

ifeq ($(call cc-option-yn, -Wheader-guard),y)
  EXTRA_CFLAGS += -Wheader-guard
endif

# Module information used by KBuild framework
obj-$(CONFIG_DRV_PERF) += $(MODNAME).o
$(MODNAME)-y := $(OBJS)
clean-files := $(CLEAN_FILES)
